package eu.esa.opt.spectral./*domain_area*/;

import com.bc.ceres.core.ProgressMonitor;
import eu.esa.opt.radiometry.BaseIndexOp;
import eu.esa.opt.radiometry.annotations.BandParameter;
import org.esa.snap.core.datamodel.Band;
import org.esa.snap.core.gpf.OperatorException;
import org.esa.snap.core.gpf.OperatorSpi;
import org.esa.snap.core.gpf.Tile;
import org.esa.snap.core.gpf.annotations.OperatorMetadata;
import org.esa.snap.core.gpf.annotations.Parameter;

import java.awt.*;
import java.util.Map;

/**
 * Operator class for /*operator_class_name_area*/
 * Generated by @see eu.esa.opt.radiometry.util.RadiometricIndicesOpsClassesGenerator
 *
 * @author Adrian Draghici
 */

@OperatorMetadata(
        alias = "/*operator_class_name_area*/Op",
        version = "1.0",
        category = "/*category_area*/",
        description = "/*description_area*/",
        authors = "Adrian Draghici",
        copyright = "Copyright (C) 2025 by CS Group ROMANIA")
public class /*operator_class_name_area*/Op extends BaseIndexOp {

    // constants
    public static final String BAND_NAME = "/*operator_class_name_lowercase_area*/";
/*parameters_area*//*source_bands_area*/
    @Override
    public String getBandName() {
        return BAND_NAME;
    }

    @Override
    public void computeTileStack(Map<Band, Tile> targetTiles, Rectangle rectangle, ProgressMonitor pm) throws OperatorException {
        pm.beginTask("Computing /*operator_class_name_area*/", rectangle.height);
        try {
/*tile_vars_area*/

            // SIITBX-494 - retrieve bands after suffix (which is the operator band name)
            Tile /*operator_class_name_lowercase_area*/ = targetTiles.get(getBandWithSuffix(targetProduct, "_" + BAND_NAME));
            Tile /*operator_class_name_lowercase_area*/Flags = targetTiles.get(targetProduct.getBand(FLAGS_BAND_NAME));

            float /*operator_class_name_lowercase_area*/Value;

            for (int y = rectangle.y; y < rectangle.y + rectangle.height; y++) {
                for (int x = rectangle.x; x < rectangle.x + rectangle.width; x++) {
/*equation_vars_area*/

                    /*operator_class_name_lowercase_area*/Value = /*equation_formula_area*/;
                    /*operator_class_name_lowercase_area*/.setSample(x, y, computeFlag(x, y, /*operator_class_name_lowercase_area*/Value, /*operator_class_name_lowercase_area*/Flags));
                }
                checkForCancellation();
                pm.worked(1);
            }
        } finally {
            pm.done();
        }
    }
    /*pow_method_area*/
    public static class Spi extends OperatorSpi {

        public Spi() {
            super(/*operator_class_name_area*/Op.class);
        }
    }
}

package eu.esa.opt.spectral.soil;

import com.bc.ceres.core.ProgressMonitor;
import eu.esa.opt.radiometry.BaseIndexOp;
import eu.esa.opt.radiometry.annotations.BandParameter;
import org.esa.snap.core.datamodel.Band;
import org.esa.snap.core.gpf.OperatorException;
import org.esa.snap.core.gpf.OperatorSpi;
import org.esa.snap.core.gpf.Tile;
import org.esa.snap.core.gpf.annotations.OperatorMetadata;
import org.esa.snap.core.gpf.annotations.Parameter;

import java.awt.*;
import java.util.Map;

/**
 * Operator class for Bitm
 * Generated by @see eu.esa.opt.radiometry.util.RadiometricIndicesOpsClassesGenerator
 *
 * @author Adrian Draghici
 */
@OperatorMetadata(
        alias = "BitmOp",
        version = "1.0",
        category = "Optical/Thematic Land Processing/Soil Spectral Indices",
        description = "Landsat TM-based Brightness Index",
        authors = "Adrian Draghici",
        copyright = "Copyright (C) 2025 by CS Group ROMANIA")
public class BitmOp extends BaseIndexOp {

    // constants
    public static final String BAND_NAME = "bitm";

    @Parameter(label = "Blue source band",
            description = "The Blue band for the Template computation. If not provided, the operator will try to find the best fitting band.",
            rasterDataNodeType = Band.class)
    @BandParameter(minWavelength = 450, maxWavelength = 530)
    private String blueSourceBand;

    @Parameter(label = "Green source band",
            description = "The Green band for the Template computation. If not provided, the operator will try to find the best fitting band.",
            rasterDataNodeType = Band.class)
    @BandParameter(minWavelength = 510, maxWavelength = 600)
    private String greenSourceBand;

    @Parameter(label = "Red source band",
            description = "The Red band for the Template computation. If not provided, the operator will try to find the best fitting band.",
            rasterDataNodeType = Band.class)
    @BandParameter(minWavelength = 620, maxWavelength = 690)
    private String redSourceBand;

    @Override
    public String getBandName() {
        return BAND_NAME;
    }

    @Override
    public void computeTileStack(Map<Band, Tile> targetTiles, Rectangle rectangle, ProgressMonitor pm) throws OperatorException {
        pm.beginTask("Computing Bitm", rectangle.height);
        try {

            Tile blueTile = getSourceTile(getSourceProduct().getBand(blueSourceBand), rectangle);
            Tile greenTile = getSourceTile(getSourceProduct().getBand(greenSourceBand), rectangle);
            Tile redTile = getSourceTile(getSourceProduct().getBand(redSourceBand), rectangle);

            // SIITBX-494 - retrieve bands after suffix (which is the operator band name)
            Tile bitm = targetTiles.get(getBandWithSuffix(targetProduct, "_" + BAND_NAME));
            Tile bitmFlags = targetTiles.get(targetProduct.getBand(FLAGS_BAND_NAME));

            float bitmValue;

            for (int y = rectangle.y; y < rectangle.y + rectangle.height; y++) {
                for (int x = rectangle.x; x < rectangle.x + rectangle.width; x++) {

                    final float b = blueTile.getSampleFloat(x, y);
                    final float g = greenTile.getSampleFloat(x, y);
                    final float r = redTile.getSampleFloat(x, y);

                    bitmValue = pow(((pow(b, 2.0f) + pow(g, 2.0f) + pow(r, 2.0f)) / 3.0f), 0.5f);
                    bitm.setSample(x, y, computeFlag(x, y, bitmValue, bitmFlags));
                }
                checkForCancellation();
                pm.worked(1);
            }
        } finally {
            pm.done();
        }
    }

    private static float pow(float n, float p) {
        return (float) Math.pow(n, p);
    }

    public static class Spi extends OperatorSpi {

        public Spi() {
            super(BitmOp.class);
        }
    }
}
